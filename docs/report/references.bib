@inproceedings{Dala_Paper,
author = {Fernandez-Reyes, Kiko and Gariano, Isaac Oscar and Noble, James and Greenwood-Thessman, Erin and Homer, Michael and Wrigstad, Tobias},
title = {Dala: a simple capability-based dynamic language design for data race-freedom},
year = {2021},
isbn = {9781450391108},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486607.3486747},
doi = {10.1145/3486607.3486747},
abstract = {Dynamic languages like Erlang, Clojure, JavaScript, and E adopted data-race freedom by design. To enforce data-race freedom, these languages either deep copy objects during actor (thread) communication or proxy back to their owning thread. We present Dala, a simple programming model that ensures data-race freedom while supporting efficient inter-thread communication. Dala is a dynamic, concurrent, capability-based language that relies on three core capabilities: immutable values can be shared freely; isolated mutable objects can be transferred between threads but not aliased; local objects can be aliased within their owning thread but not dereferenced by other threads. Objects with capabilities can co-exist with unsafe objects, that are unchecked and may suffer data races, without compromising the safety of safe objects. We present a formal model of Dala, prove data race-freedom and state and prove a dynamic gradual guarantee. These theorems guarantee data race-freedom when using safe capabilities and show that the addition of capabilities is semantics preserving modulo permission and cast errors.},
booktitle = {Proceedings of the 2021 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
pages = {1â€“17},
numpages = {17},
keywords = {permission, isolation, immutability, concurrency, capability},
location = {Chicago, IL, USA},
series = {Onward! 2021}
}

@article{shore2004fail,
	title={Fail fast [software debugging]},
	author={Shore, Jim},
	journal={IEEE Software},
	volume={21},
	number={5},
	pages={21--25},
	year={2004},
	publisher={IEEE}
}

@inproceedings{GraceAbsence-Black2012,
    title = {Grace: the Absence of (Inessential) Difficulty},
    booktitle = {Symposium on New Ideas in Programming and Reflections on Software},
    year = 2012,
    doi = "10.1145/2384592.2384601",
    url = "https://michael.homer.nz/Publications/Onward2012/GraceAbsence-Black2012.pdf",
    author = {Black, Andrew P. and Bruce, Kim B. and Homer, Michael and Noble, James},
    abstract = {
        We are engaged in the design of a small, simple programming language
        for teaching novices object-oriented programming. This turns out to be
        far from a small, simple task. We focus on three of the problems that
        we encountered, and how we believe we have solved them. The problems
        are (1) gracefully combining object initialization, inheritance, and
        immutable objects, (2) reconciling apparently irreconcilable views on
        type-checking, and (3) providing a family of languages, each suitable
        for students at different levels of mastery, while ensuring conceptual
        integrity of their designs. In each case our solutions are based on
        existing research; our contribution is, by design, consolidation rather
        than innovation.
    }
}

@inproceedings{DafnyExperience-Noble2024,
    title = {Dafny vs. Dala: Experience with Mechanising Language Design},
    booktitle = {Workshop on Formal Techniques for Java-like Programs},
    year = 2024,
    doi = "10.1145/3678721.3686228",
    url = "https://michael.homer.nz/Publications/FTfJP2024/DafnyExperience-Noble2024.pdf",
    author = {Noble, James and Mackay, Julian and Wrigstad, Tobias and Fawcet, Andrew and Homer, Michael},
    abstract = {
        Dala is a design for a concurrent dynamic object-oriented language. A
        key goal of Dala's design is to avoid data races, by ensuring threads
        do not share mutable state. In this paper we discuss our experience
        using the program verification tool Dafny to validate Dala's design. We
        explain how we modelled salient features of Dala in Dafny, and how
        Dafny did (or did not) assist our confidence in Dala's design.
    }
}
